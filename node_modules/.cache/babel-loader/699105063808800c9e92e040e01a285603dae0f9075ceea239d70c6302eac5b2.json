{"ast":null,"code":"var _jsxFileName = \"/home/evans/bot-battlr/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport BotCollection from './components/BotCollection';\nimport YourBotArmy from './components/YourBotArmy';\nimport { fetchBots } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [bots, setBots] = useState([]);\n  const [yourArmy, setYourArmy] = useState([]);\n\n  // Fetch bots when the component mounts\n  useEffect(() => {\n    const loadBots = async () => {\n      try {\n        const botsData = await fetchBots();\n        setBots(botsData);\n      } catch (error) {\n        console.error('Failed to fetch bots:', error);\n      }\n    };\n    loadBots();\n  }, []);\n\n  // Handle enlisting a bot\n  const handleEnlist = bot => {\n    if (!yourArmy.some(b => b.id === bot.id)) {\n      setYourArmy([...yourArmy, bot]);\n    }\n  };\n\n  // Handle releasing a bot\n  const handleRelease = bot => {\n    setYourArmy(yourArmy.filter(b => b.id !== bot.id));\n  };\n\n  // Handle discharging a bot (from both your army and the backend)\n  const handleDischarge = async bot => {\n    try {\n      await fetch(`http://localhost:8001/bots/${bot.id}`, {\n        method: 'DELETE'\n      });\n      setYourArmy(yourArmy.filter(b => b.id !== bot.id));\n    } catch (error) {\n      console.error('Failed to discharge bot:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bot Battlr\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n      bots: bots,\n      onEnlist: handleEnlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YourBotArmy, {\n      bots: yourArmy,\n      onRelease: handleRelease,\n      onDischarge: handleDischarge\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ZAHOrx6rKwq1IsxQRkog7xhwC6c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BotCollection","YourBotArmy","fetchBots","jsxDEV","_jsxDEV","App","_s","bots","setBots","yourArmy","setYourArmy","loadBots","botsData","error","console","handleEnlist","bot","some","b","id","handleRelease","filter","handleDischarge","fetch","method","children","fileName","_jsxFileName","lineNumber","columnNumber","onEnlist","onRelease","onDischarge","_c","$RefreshReg$"],"sources":["/home/evans/bot-battlr/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport BotCollection from './components/BotCollection';\nimport YourBotArmy from './components/YourBotArmy';\nimport { fetchBots } from './api';\n\nconst App = () => {\n  const [bots, setBots] = useState([]);\n  const [yourArmy, setYourArmy] = useState([]);\n\n  // Fetch bots when the component mounts\n  useEffect(() => {\n    const loadBots = async () => {\n      try {\n        const botsData = await fetchBots();\n        setBots(botsData);\n      } catch (error) {\n        console.error('Failed to fetch bots:', error);\n      }\n    };\n\n    loadBots();\n  }, []);\n\n  // Handle enlisting a bot\n  const handleEnlist = (bot) => {\n    if (!yourArmy.some(b => b.id === bot.id)) {\n      setYourArmy([...yourArmy, bot]);\n    }\n  };\n\n  // Handle releasing a bot\n  const handleRelease = (bot) => {\n    setYourArmy(yourArmy.filter(b => b.id !== bot.id));\n  };\n\n  // Handle discharging a bot (from both your army and the backend)\n  const handleDischarge = async (bot) => {\n    try {\n      await fetch(`http://localhost:8001/bots/${bot.id}`, {\n        method: 'DELETE',\n      });\n      setYourArmy(yourArmy.filter(b => b.id !== bot.id));\n    } catch (error) {\n      console.error('Failed to discharge bot:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Bot Battlr</h1>\n      <BotCollection bots={bots} onEnlist={handleEnlist} />\n      <YourBotArmy \n        bots={yourArmy} \n        onRelease={handleRelease} \n        onDischarge={handleDischarge}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMY,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMV,SAAS,CAAC,CAAC;QAClCM,OAAO,CAACI,QAAQ,CAAC;MACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDF,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,YAAY,GAAIC,GAAG,IAAK;IAC5B,IAAI,CAACP,QAAQ,CAACQ,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKH,GAAG,CAACG,EAAE,CAAC,EAAE;MACxCT,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEO,GAAG,CAAC,CAAC;IACjC;EACF,CAAC;;EAED;EACA,MAAMI,aAAa,GAAIJ,GAAG,IAAK;IAC7BN,WAAW,CAACD,QAAQ,CAACY,MAAM,CAACH,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKH,GAAG,CAACG,EAAE,CAAC,CAAC;EACpD,CAAC;;EAED;EACA,MAAMG,eAAe,GAAG,MAAON,GAAG,IAAK;IACrC,IAAI;MACF,MAAMO,KAAK,CAAC,8BAA8BP,GAAG,CAACG,EAAE,EAAE,EAAE;QAClDK,MAAM,EAAE;MACV,CAAC,CAAC;MACFd,WAAW,CAACD,QAAQ,CAACY,MAAM,CAACH,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKH,GAAG,CAACG,EAAE,CAAC,CAAC;IACpD,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED,oBACET,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBzB,OAAA,CAACJ,aAAa;MAACO,IAAI,EAAEA,IAAK;MAACuB,QAAQ,EAAEf;IAAa;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrDzB,OAAA,CAACH,WAAW;MACVM,IAAI,EAAEE,QAAS;MACfsB,SAAS,EAAEX,aAAc;MACzBY,WAAW,EAAEV;IAAgB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACvB,EAAA,CArDID,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAuDT,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}