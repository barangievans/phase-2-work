{"ast":null,"code":"var _jsxFileName = \"/home/evans/bot-battlr/src/components/BotCollection.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { fetchBots } from '../api'; // Make sure '../api' is correctly pointing to your API module\nimport BotCard from './BotCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BotCollection = ({\n  onEnlist\n}) => {\n  _s();\n  const [bots, setBots] = useState([]);\n  useEffect(() => {\n    const loadBots = async () => {\n      try {\n        const botsData = await fetchBots();\n        setBots(botsData);\n      } catch (error) {\n        console.error('Failed to fetch bots:', error);\n      }\n    };\n    loadBots();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: bots.map(bot => /*#__PURE__*/_jsxDEV(BotCard, {\n      bot: bot,\n      onEnlist: onEnlist\n    }, bot.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(BotCollection, \"HLWYdwhjlsHzdjlYtqtFyxxPKrE=\");\n_c = BotCollection;\nexport default BotCollection;\nvar _c;\n$RefreshReg$(_c, \"BotCollection\");","map":{"version":3,"names":["React","useEffect","useState","fetchBots","BotCard","jsxDEV","_jsxDEV","BotCollection","onEnlist","_s","bots","setBots","loadBots","botsData","error","console","children","map","bot","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/evans/bot-battlr/src/components/BotCollection.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { fetchBots } from '../api';  // Make sure '../api' is correctly pointing to your API module\nimport BotCard from './BotCard';\n\nconst BotCollection = ({ onEnlist }) => {\n  const [bots, setBots] = useState([]);\n\n  useEffect(() => {\n    const loadBots = async () => {\n      try {\n        const botsData = await fetchBots();\n        setBots(botsData);\n      } catch (error) {\n        console.error('Failed to fetch bots:', error);\n      }\n    };\n\n    loadBots();\n  }, []);\n\n  return (\n    <div>\n      {bots.map(bot => (\n        <BotCard key={bot.id} bot={bot} onEnlist={onEnlist} />\n      ))}\n    </div>\n  );\n};\n\nexport default BotCollection;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,QAAQ,CAAC,CAAE;AACrC,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd,MAAMW,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMV,SAAS,CAAC,CAAC;QAClCQ,OAAO,CAACE,QAAQ,CAAC;MACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDF,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA;IAAAU,QAAA,EACGN,IAAI,CAACO,GAAG,CAACC,GAAG,iBACXZ,OAAA,CAACF,OAAO;MAAcc,GAAG,EAAEA,GAAI;MAACV,QAAQ,EAAEA;IAAS,GAArCU,GAAG,CAACC,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiC,CACtD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACd,EAAA,CAvBIF,aAAa;AAAAiB,EAAA,GAAbjB,aAAa;AAyBnB,eAAeA,aAAa;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}